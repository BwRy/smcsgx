# Run YAO hybrid model on the local machine
./evaluator -d
./sender -d -y

# Run SFE mil computation on the local machine
./evaluator -d
./sender -d

# Run SFE uc computation on the local machine
./evaluator -d
./sender -d -s 1

# Run SFE dijk computation on the local machine
./evaluator -d
./sender -d -s 2

# Run SFE mil computation on the local machine with user inputs
./evaluator -d -i input/sfe_mil_evl.txt
./sender -d -i input/sfe_mil_gen.txt

# Run SFE dijk computation on the local machine with user inputs
./evaluator -d -i input/sfe_dj_evl.txt
./sender -d -s 2 -i input/sfe_dj_gen.txt

# Run SFE oram computation on the local machine with user inputs (faked) with ORAM disabled
./evaluator -d -i input/sfe_or_evl.txt -o 0
./sender -d -s 3 -i input/sfe_or_gen.txt

# Run SFE oram computation on the local machine with user inputs (faked) with ORAM Tree 
./evaluator -d -i input/sfe_or_evl.txt -o 1
./sender -d -s 3 -i input/sfe_or_gen.txt

# Run SFE oram computation on the local machine with user inputs (faked) with ORAM Linear 
./evaluator -d -i input/sfe_or_evl.txt -o 2
./sender -d -s 3 -i input/sfe_or_gen.txt


# BENchmark:
# We need to run 9 cases:
# HP-SGX1: 10.245.44.45
# HP-SGX2: 10.245.44.35

# 1. SGX-SFE Dijkstra
./evaluator -i input/sfe_dj_evl.txt
./sender -i input/sfe_dj_gen.txt -s 2 -a 10.245.44.35

# 2. Naive Dijkstra
./evaluator -i input/sfe_dj_evl.txt -n
./sender -i input/sfe_dj_gen.txt -s 2

# 3. SGX-SFE Mil
./evaluator -i input/sfe_mil_evl.txt
./sender -i input/sfe_mil_gen.txt

# 4. Naive Mil
./evaluator -i input/sfe_mil_evl.txt -n
./sender -i input/sfe_mil_gen.txt

# 5. SGX-SFE UC
./evaluator -i input/sfe_uc_evl.txt 
./sender -i input/sfe_uc_gen.txt -s 1

# 6. Naive UC

# 7. SGX-SFE Oram
./evaluator -i input/sfe_or_evl.txt -o 0 (non-oram, 1, tree-oram, 2, linear-oram)
./sender -i input/sfe_or_gen.txt -s 3

# BENnote:
please run these program sizes for SFE-SGX and SGX-naive programs (naive is labeled non-sfe)

dijktra - program sizes (nodes) - 20, 50, 100, 200, 250, 1000, 10000

millionaires (size) - please divide these sizes by 32 like (#define sizex 1024/32) - 1024, 4096, 16384, 262144, 4194304,

UC - (gates, pool, input, output) - (1000,350,250,250), (10000,1000,250,250), (50000,1000,500,500), (250000,10000,1500,1500), (250000,25000,5000,5000)

Database (size, queries) [Please run these tests using both ORAM and ORAM2] - (500,2500), (1000,2500), (1500,5000), (5000,5000), (5000,25000), (25000,25000),

These should take less than 5 minutes for each test. Let me know if any of these take longer than that (maybe for the IO - and we can shrink the sizes)


#8. Hybrid Oram DB
./evaluator -y 1
./sender -y 1

#9. Hybrid Dijkstra
./evaluator -y 2
./sender -y 2

#10. Hybrid Oram DB with query split/protection
./evaluator -y 3
./sender -y 3
